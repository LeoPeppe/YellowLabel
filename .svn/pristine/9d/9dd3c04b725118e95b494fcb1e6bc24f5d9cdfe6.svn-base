package it.cle.webproject.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.validation.Validator;
import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;
import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
import org.springframework.web.servlet.view.InternalResourceViewResolver;

/**
 * The Class WebMvcConfig.
 * Abilita il modulo MVC
 */
@EnableWebMvc
@Configuration
public class WebMvcConfig extends WebMvcConfigurerAdapter {
	
	@Autowired
	private MessageSource messageSource;
	
	@Override
	public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
	    configurer.enable();
	}
	
	/*@Override
	public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {
	    MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();
	    converter.getObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_NULL);
	    converters.add(converter);
	    converters.add(createXmlHttpMessageConverter());
        super.configureMessageConverters(converters);
      
	}
	
	 private HttpMessageConverter<Object> createXmlHttpMessageConverter() {
	        MarshallingHttpMessageConverter xmlConverter = 
	          new MarshallingHttpMessageConverter();
	 
	        XStreamMarshaller xstreamMarshaller = new XStreamMarshaller();
	        xmlConverter.setMarshaller(xstreamMarshaller);
	        xmlConverter.setUnmarshaller(xstreamMarshaller);
	 
	        return xmlConverter;
	    }*/
	
	@Bean
	public LocalValidatorFactoryBean validator() {
	    LocalValidatorFactoryBean validatorFactoryBean = new LocalValidatorFactoryBean();
	    validatorFactoryBean.setValidationMessageSource(messageSource);
	    return validatorFactoryBean;
	}
	
	@Override
	public Validator getValidator() {
	    return validator();
	}
	    
	/**
	 * individua la locazione delle pagine con estensione jsp
	 */
	@Bean
    public InternalResourceViewResolver getInternalResourceViewResolver() {
        InternalResourceViewResolver resolver = new InternalResourceViewResolver();
        resolver.setPrefix("/WEB-INF/pages/");
        resolver.setSuffix(".jsp");
        return resolver;
    }
	
}
